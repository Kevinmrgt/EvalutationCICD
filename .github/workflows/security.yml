name: 🔒 Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ==========================================
  # Job 1: Dependency Vulnerability Scan
  # ==========================================
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
      
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔍 Run npm audit
        run: |
          npm audit --audit-level moderate --json > npm-audit.json || true
          
      - name: 📊 Upload npm audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit.json
          
      - name: 🛡️ Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-results.json
          
      - name: 📊 Upload Snyk results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: snyk-results
          path: snyk-results.json

  # ==========================================
  # Job 2: SAST (Static Application Security Testing)
  # ==========================================
  sast-scan:
    name: 🔍 SAST Code Analysis
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
      actions: read
      
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          
      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
        continue-on-error: true
          
      - name: 🛡️ Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/nodejs
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

  # ==========================================
  # Job 3: Secret Scanning
  # ==========================================
  secret-scan:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔍 TruffleHog OSS Secret Scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true
        if: github.event_name != 'push' || github.event.before != '0000000000000000000000000000000000000000'
          
      - name: 🔍 GitLeaks Secret Scanner
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  # ==========================================
  # Job 4: Docker Image Security Scan
  # ==========================================
  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🏗️ Build Docker image for scanning
        run: |
          docker build -t security-scan:latest --target production .
          
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
          
      - name: 📊 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
          
      - name: 📊 Upload Trivy results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-results
          path: trivy-results.sarif
          
      - name: 🔍 Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: 'security-scan:latest'
          fail-build: false
          severity-cutoff: high
        continue-on-error: true
          
      - name: 📊 Upload Grype scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: grype-results
          path: anchore-reports/
          if-no-files-found: ignore

  # ==========================================
  # Job 5: Infrastructure Security
  # ==========================================
  infrastructure-scan:
    name: 🏗️ Infrastructure Security
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔍 Scan Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true
          
      - name: 📊 Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('hadolint-results.sarif') != ''
        with:
          sarif_file: hadolint-results.sarif
        continue-on-error: true
          
      - name: 🔍 Scan docker-compose with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          file: docker-compose.yml
          framework: dockerfile,docker_compose
          output_format: sarif
          output_file_path: checkov-results.sarif
        continue-on-error: true
          
      - name: 📊 Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('checkov-results.sarif') != ''
        with:
          sarif_file: checkov-results.sarif
        continue-on-error: true
          
      - name: 📊 Upload scan results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-scan-results
          path: |
            hadolint-results.sarif
            checkov-results.sarif
          if-no-files-found: ignore

  # ==========================================
  # Job 6: Security Report Summary
  # ==========================================
  security-summary:
    name: 📋 Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, docker-security, infrastructure-scan]
    if: always()
    
    steps:
      - name: 📂 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        
      - name: 📋 Generate Security Summary
        run: |
          echo "# 🔒 Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## 📊 Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "| Category | Status |" >> security-summary.md
          echo "|----------|--------|" >> security-summary.md
          
          # Check each job status
          if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
            echo "| Dependency Scan | ✅ PASS |" >> security-summary.md
          else
            echo "| Dependency Scan | ⚠️ CHECK |" >> security-summary.md
          fi
          
          if [ "${{ needs.sast-scan.result }}" == "success" ]; then
            echo "| SAST Analysis | ✅ PASS |" >> security-summary.md
          else
            echo "| SAST Analysis | ⚠️ CHECK |" >> security-summary.md
          fi
          
          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "| Secret Detection | ✅ PASS |" >> security-summary.md
          else
            echo "| Secret Detection | ⚠️ CHECK |" >> security-summary.md
          fi
          
          if [ "${{ needs.docker-security.result }}" == "success" ]; then
            echo "| Docker Security | ✅ PASS |" >> security-summary.md
          else
            echo "| Docker Security | ⚠️ CHECK |" >> security-summary.md
          fi
          
          if [ "${{ needs.infrastructure-scan.result }}" == "success" ]; then
            echo "| Infrastructure | ✅ PASS |" >> security-summary.md
          else
            echo "| Infrastructure | ⚠️ CHECK |" >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "Generated on: $(date)" >> security-summary.md
          
      - name: 📊 Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md 