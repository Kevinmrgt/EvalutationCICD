#!/bin/bash

# =============================================================================
# Script de test de s√©curit√© local
# Usage: ./scripts/test-security.sh
# =============================================================================

set -e

echo "üîí Test de s√©curit√© local - CI/CD Evaluation"
echo "============================================="
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonctions utilitaires
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "‚ÑπÔ∏è $1"
}

# Test 1: V√©rification des d√©pendances
echo "1Ô∏è‚É£ Test des d√©pendances npm..."
if command -v npm &> /dev/null; then
    print_success "npm disponible"
    
    if [ -f "package.json" ]; then
        print_success "package.json trouv√©"
        
        # V√©rifier les vuln√©rabilit√©s
        echo "   üîç Audit des d√©pendances..."
        if npm audit --audit-level moderate; then
            print_success "Aucune vuln√©rabilit√© critique trouv√©e"
        else
            print_warning "Des vuln√©rabilit√©s ont √©t√© trouv√©es"
        fi
    else
        print_error "package.json manquant"
    fi
else
    print_error "npm n'est pas install√©"
fi
echo ""

# Test 2: V√©rification Docker
echo "2Ô∏è‚É£ Test de la configuration Docker..."
if command -v docker &> /dev/null; then
    print_success "Docker disponible"
    
    # Test build du Dockerfile
    echo "   üê≥ Test de build du Dockerfile..."
    if docker build -t security-test:latest --target production . > /dev/null 2>&1; then
        print_success "Build Docker r√©ussi"
        
        # V√©rifier la taille de l'image
        IMAGE_SIZE=$(docker images security-test:latest --format "table {{.Size}}" | tail -n 1)
        print_info "Taille de l'image: $IMAGE_SIZE"
        
        # Nettoyer l'image de test
        docker rmi security-test:latest > /dev/null 2>&1
    else
        print_error "√âchec du build Docker"
    fi
else
    print_error "Docker n'est pas install√©"
fi
echo ""

# Test 3: Scan des patterns de s√©curit√©
echo "3Ô∏è‚É£ Scan des patterns de s√©curit√©..."

# Recherche de secrets potentiels
echo "   üîç Recherche de secrets potentiels..."
SECRETS_FOUND=0

# Patterns de secrets courants
PATTERNS=(
    "password\s*=\s*['\"][^'\"]*['\"]"
    "secret\s*=\s*['\"][^'\"]*['\"]"
    "token\s*=\s*['\"][^'\"]*['\"]"
    "api_key\s*=\s*['\"][^'\"]*['\"]"
    "private_key"
)

for pattern in "${PATTERNS[@]}"; do
    if grep -r -i -E "$pattern" --include="*.js" --include="*.json" . --exclude-dir=node_modules > /dev/null 2>&1; then
        SECRETS_FOUND=$((SECRETS_FOUND + 1))
        print_warning "Pattern suspect trouv√©: $pattern"
    fi
done

if [ $SECRETS_FOUND -eq 0 ]; then
    print_success "Aucun secret suspect trouv√©"
else
    print_warning "$SECRETS_FOUND pattern(s) suspect(s) trouv√©(s)"
fi

# Recherche d'eval()
echo "   üîç Recherche d'eval()..."
if grep -r "eval(" --include="*.js" . --exclude-dir=node_modules > /dev/null 2>&1; then
    print_warning "Usage d'eval() trouv√© (potentiellement dangereux)"
else
    print_success "Aucun usage d'eval() trouv√©"
fi

# Recherche de console.log
echo "   üîç Recherche de console.log en production..."
if find ./api -name "*.js" -exec grep -l "console\.log" {} \; 2>/dev/null | grep -q .; then
    print_warning "console.log trouv√© dans le code de production"
else
    print_success "Aucun console.log trouv√©"
fi
echo ""

# Test 4: V√©rification des fichiers de configuration
echo "4Ô∏è‚É£ V√©rification des fichiers de configuration..."

# V√©rifier .dockerignore
if [ -f ".dockerignore" ]; then
    print_success ".dockerignore pr√©sent"
    if grep -q "node_modules" .dockerignore; then
        print_success "node_modules exclu dans .dockerignore"
    else
        print_warning "node_modules devrait √™tre exclu dans .dockerignore"
    fi
else
    print_warning ".dockerignore manquant"
fi

# V√©rifier .gitignore
if [ -f ".gitignore" ]; then
    print_success ".gitignore pr√©sent"
    if grep -q "node_modules" .gitignore; then
        print_success "node_modules exclu dans .gitignore"
    else
        print_warning "node_modules devrait √™tre exclu dans .gitignore"
    fi
else
    print_warning ".gitignore manquant"
fi

# V√©rifier les variables d'environnement
if [ -f "env.example" ]; then
    print_success "env.example pr√©sent"
else
    print_warning "env.example manquant"
fi
echo ""

# Test 5: V√©rification des workflows GitHub
echo "5Ô∏è‚É£ V√©rification des workflows GitHub..."

if [ -d ".github/workflows" ]; then
    print_success "Dossier workflows pr√©sent"
    
    WORKFLOW_COUNT=$(find .github/workflows -name "*.yml" -o -name "*.yaml" | wc -l)
    print_info "$WORKFLOW_COUNT workflow(s) trouv√©(s)"
    
    # V√©rifier les workflows sp√©cifiques
    if [ -f ".github/workflows/security.yml" ]; then
        print_success "Workflow de s√©curit√© principal pr√©sent"
    fi
    
    if [ -f ".github/workflows/security-basic.yml" ]; then
        print_success "Workflow de s√©curit√© basique pr√©sent"
    fi
    
    if [ -f ".github/workflows/ci.yml" ]; then
        print_success "Workflow CI pr√©sent"
    fi
    
    if [ -f ".github/workflows/cd.yml" ]; then
        print_success "Workflow CD pr√©sent"
    fi
else
    print_error "Dossier .github/workflows manquant"
fi
echo ""

# Test 6: Test de l'API (si disponible)
echo "6Ô∏è‚É£ Test de l'API..."
if [ -f "test-api.js" ]; then
    print_success "Script de test API pr√©sent"
    
    # V√©rifier si le serveur est en cours d'ex√©cution
    if curl -s http://localhost:3000/health > /dev/null 2>&1; then
        print_success "API accessible sur localhost:3000"
        
        echo "   üß™ Ex√©cution des tests API..."
        if node test-api.js > /dev/null 2>&1; then
            print_success "Tests API pass√©s"
        else
            print_warning "Tests API √©chou√©s (serveur √©teint?)"
        fi
    else
        print_warning "API non accessible (serveur √©teint?)"
        print_info "D√©marrez le serveur avec: npm start"
    fi
else
    print_warning "Script de test API manquant"
fi
echo ""

# R√©sum√© final
echo "üèÅ R√©sum√© des tests de s√©curit√©"
echo "==============================="
echo ""
echo "‚úÖ Tests effectu√©s:"
echo "   - Audit des d√©pendances npm"
echo "   - Build et s√©curit√© Docker"
echo "   - Scan des patterns de s√©curit√©"
echo "   - V√©rification des fichiers de config"
echo "   - Validation des workflows GitHub"
echo "   - Test de l'API (si disponible)"
echo ""
echo "üìã Actions recommand√©es:"
echo "   1. Corriger les warnings trouv√©s"
echo "   2. Activer GitHub Security features"
echo "   3. Tester le workflow security-basic.yml"
echo "   4. Configurer les permissions GitHub Actions"
echo ""
echo "üìö Consultez .github/SECURITY_SETUP.md pour plus d'infos"
echo ""
print_success "Test de s√©curit√© local termin√© !" 