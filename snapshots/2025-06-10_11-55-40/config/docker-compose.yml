services:
  # =================
  # Application principale
  # =================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: evalutationcicd-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
    volumes:
      # Volume pour les logs persistants
      - app-logs:/usr/src/app/logs
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =================
  # Service de développement
  # =================
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: evalutationcicd-dev
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=debug
    volumes:
      # Bind mount pour le hot reload
      - ./api:/usr/src/app/api
      - /usr/src/app/node_modules
    networks:
      - app-network
    depends_on:
      - redis
    profiles:
      - dev

  # =================
  # Cache Redis
  # =================
  redis:
    image: redis:7-alpine
    container_name: evalutationcicd-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =================
  # Monitoring avec Prometheus (optionnel)
  # =================
  prometheus:
    image: prom/prometheus:latest
    container_name: evalutationcicd-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - app-network
    profiles:
      - monitoring

  # =================
  # Grafana pour les métriques (optionnel)
  # =================
  grafana:
    image: grafana/grafana:latest
    container_name: evalutationcicd-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - app-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# =================
# Réseaux
# =================
networks:
  app-network:
    driver: bridge
    name: evalutationcicd-network

# =================
# Volumes persistants
# =================
volumes:
  app-logs:
    name: evalutationcicd-logs
  redis-data:
    name: evalutationcicd-redis
  prometheus-data:
    name: evalutationcicd-prometheus
  grafana-data:
    name: evalutationcicd-grafana 